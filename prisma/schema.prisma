generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [vector]
}

model Business {
  id                      String          @id @default(cuid())
  name                    String
  businessType            BusinessType    @default(OTHER)
  planTier                PlanTier        @default(PRO)
  twilioPhoneNumber       String?         @unique
  notificationEmail       String?
  notificationPhoneNumber String?
  businessHours          Json?           @default("{\"monday\":{\"start\":\"9:00\",\"end\":\"17:00\"},\"tuesday\":{\"start\":\"9:00\",\"end\":\"17:00\"},\"wednesday\":{\"start\":\"9:00\",\"end\":\"17:00\"},\"thursday\":{\"start\":\"9:00\",\"end\":\"17:00\"},\"friday\":{\"start\":\"9:00\",\"end\":\"17:00\"}}")
  timezone               String?         @default("America/New_York")
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  agentConfig             AgentConfig?
  knowledgeBase           KnowledgeBase[]
  leads                   Lead[]
  users                   User[]
  callLogs                CallLog[]
  clients                 Client[]
  projects                Project[]
  integrations            Integration[]
  conversations           Conversation[]

  @@map("businesses")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         UserRole @default(USER)
  businessId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  business     Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  assignedLeads Lead[]

  @@map("users")
}

model AgentConfig {
  id                           String                @id @default(cuid())
  businessId                   String                @unique
  agentName                    String                @default("AI Assistant")
  personaPrompt                String                @default("You are a helpful and friendly assistant.")
  welcomeMessage               String                @default("Hello! How can I help you today?")
  colorTheme                   Json                  @default("{\"primary\": \"#0ea5e9\", \"secondary\": \"#64748b\"}")
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  leadCaptureCompletionMessage String?
  voiceCompletionMessage       String?
  voiceEmergencyMessage        String?              // For urgent project issues requiring immediate attention
  voiceEndCallMessage          String?
  voiceGreetingMessage         String?
  openaiVoice                  OpenAiVoice           @default(ALLOY)
  useOpenaiTts                 Boolean               @default(true)
  openaiModel                  String                @default("tts-1")
  realtimeInstructions         String?              // Custom AI instructions for realtime
  vad_threshold                Decimal?             // VAD threshold for voice detection
  silence_duration_ms          Int?                 // Silence duration for VAD
  prefix_padding_ms            Int?                 // Audio padding for VAD
  business                     Business              @relation(fields: [businessId], references: [id], onDelete: Cascade)
  questions                    LeadCaptureQuestion[]

  @@map("agent_configs")
}

model LeadCaptureQuestion {
  id                      String         @id @default(cuid())
  configId                String
  questionText            String
  expectedFormat          ExpectedFormat @default(TEXT)
  order                   Int
  isRequired              Boolean        @default(true)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  mapsToLeadField         String?
  isEssentialForEmergency Boolean        @default(false)
  config                  AgentConfig    @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([configId, order])
  @@map("lead_capture_questions")
}

model KnowledgeBase {
  id         String                 @id @default(cuid())
  businessId String
  content    String
  sourceURL  String?
  embedding  Unsupported("vector")?
  metadata   Json?                  @default("{}")
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  business   Business               @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("knowledge_base")
}

model Lead {
  id                      String               @id @default(cuid())
  businessId              String
  capturedData            Json                 // Stores all Q&A pairs
  conversationTranscript  String?              // Full conversation JSON
  status                  LeadStatus           @default(NEW)
  priority                LeadPriority         @default(NORMAL)
  assignedToUserId        String?
  clientId                String?              // Optional reference to Client if lead becomes a client
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  
  // Contact information fields (mapped from specific questions)
  contactName             String?
  contactEmail            String?
  contactPhone            String?
  address                 String?              // New field for emergency location info
  notes                   String?
  
  business                Business             @relation(fields: [businessId], references: [id], onDelete: Cascade)
  assignedTo              User?                @relation(fields: [assignedToUserId], references: [id], onDelete: SetNull)
  client                  Client?              @relation(fields: [clientId], references: [id], onDelete: SetNull)

  @@map("leads")
}

model Conversation {
  id           String    @id @default(cuid())
  businessId   String
  sessionId    String    @unique
  messages     Json      @default("[]")
  metadata     Json?     @default("{}")
  phoneNumber  String?
  clientId     String?
  startedAt    DateTime  @default(now())
  endedAt      DateTime?
  leadId       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  business     Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  client       Client?   @relation(fields: [clientId], references: [id])
  callLogs     CallLog[]

  @@map("conversations")
}

model CallLog {
  id             String        @id @default(cuid())
  businessId     String
  conversationId String
  callSid        String        @unique
  from           String
  to             String
  direction      CallDirection
  type           CallType
  status         String
  source         String
  content        String?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  business       Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("call_logs")
}

model Client {
  id           String    @id @default(cuid())
  businessId   String
  name         String
  email        String?
  phone        String?   // For client recognition by phone number
  externalId   String?   @unique // For PM tool sync
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  business     Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  projects     Project[]
  leads        Lead[]    // A lead can become a client (optional)
  conversations Conversation[]

  @@map("clients")
}

model Project {
  id           String    @id @default(cuid())
  businessId   String
  clientId     String
  name         String
  status       String    // e.g., "In Progress", "Completed", "On Hold"
  details      String?   // Brief description from PM tool
  lastSyncedAt DateTime? // Timestamp of last successful sync
  externalId   String?   @unique // Unique ID from PM tool (Asana Task ID, Jira Issue Key)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  business     Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  client       Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Integration {
  id           String    @id @default(cuid())
  businessId   String
  type         String    // e.g., "ASANA", "JIRA", "GOOGLE_SHEETS"
  apiKey       String?   // API token/key for integration
  webhookSecret String?  // Secret for validating webhooks
  settings     Json?     // Any additional settings for the integration
  isEnabled    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  business     Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

enum OpenAiVoice {
  ALLOY
  ASH
  BALLAD
  CORAL
  ECHO
  SAGE
  SHIMMER
  VERSE
}

enum BusinessType {
  BRANDING
  WEB_DESIGN
  MARKETING
  DIGITAL
  CREATIVE
  DESIGN_AGENCY
  ANIMATION_STUDIO
  VFX_STUDIO
  PRODUCTION_STUDIO
  OTHER
}

enum UserRole {
  ADMIN
  USER
}

enum PlanTier {
  PRO
  ENTERPRISE
}

enum ExpectedFormat {
  TEXT
  EMAIL
  PHONE
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CLOSED
}

enum LeadPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum CallDirection {
  INBOUND
  OUTBOUND
}

enum CallType {
  VOICE
  CHAT
}
