generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [vector]
}

model Business {
  id                      String          @id @default(cuid())
  name                    String
  businessType            BusinessType    @default(OTHER)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  notificationEmail       String?
  notificationPhoneNumber String?
  planTier                PlanTier        @default(FREE)
  twilioPhoneNumber       String?         @unique
  agentConfig             AgentConfig?
  knowledgeBase           KnowledgeBase[]
  leads                   Lead[]
  users                   User[]

  @@map("businesses")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         UserRole @default(USER)
  businessId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  business     Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("users")
}

model AgentConfig {
  id                           String                @id @default(cuid())
  businessId                   String                @unique
  agentName                    String                @default("AI Assistant")
  personaPrompt                String                @default("You are a helpful and friendly assistant.")
  welcomeMessage               String                @default("Hello! How can I help you today?")
  colorTheme                   Json                  @default("{\"primary\": \"#0ea5e9\", \"secondary\": \"#64748b\"}")
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  leadCaptureCompletionMessage String?
  voiceCompletionMessage       String?
  voiceEmergencyMessage        String?
  voiceEndCallMessage          String?
  voiceGreetingMessage         String?
  twilioLanguage               String                @default("en-US")
  twilioVoice                  String                @default("alice")
  business                     Business              @relation(fields: [businessId], references: [id], onDelete: Cascade)
  questions                    LeadCaptureQuestion[]

  @@map("agent_configs")
}

model LeadCaptureQuestion {
  id                      String         @id @default(cuid())
  configId                String
  questionText            String
  expectedFormat          ExpectedFormat @default(TEXT)
  order                   Int
  isRequired              Boolean        @default(true)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  mapsToLeadField         String?
  isEssentialForEmergency Boolean        @default(false)
  config                  AgentConfig    @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@unique([configId, order])
  @@map("lead_capture_questions")
}

model KnowledgeBase {
  id         String                 @id @default(cuid())
  businessId String
  content    String
  sourceURL  String?
  embedding  Unsupported("vector")?
  metadata   Json?                  @default("{}")
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  business   Business               @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("knowledge_base")
}

model Lead {
  id                     String       @id @default(cuid())
  businessId             String
  capturedData           Json         @default("{}")
  conversationTranscript String
  status                 LeadStatus   @default(NEW)
  contactEmail           String?
  contactPhone           String?
  contactName            String?
  notes                  String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  priority               LeadPriority @default(NORMAL)
  business               Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("leads")
}

model Conversation {
  id         String    @id @default(cuid())
  businessId String
  sessionId  String    @unique
  messages   Json      @default("[]")
  startedAt  DateTime  @default(now())
  endedAt    DateTime?
  leadId     String?

  @@map("conversations")
}

enum BusinessType {
  REAL_ESTATE
  LAW
  HVAC
  PLUMBING
  OTHER
}

enum UserRole {
  ADMIN
  USER
}

enum PlanTier {
  FREE
  BASIC
  PRO
}

enum ExpectedFormat {
  TEXT
  EMAIL
  PHONE
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CLOSED
}

enum LeadPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
